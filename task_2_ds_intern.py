# -*- coding: utf-8 -*-
"""task_2_ds_intern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dsTvAFm4WJPEB3t9LIiKoLMLQz9HKSyN

*TASK 2 : Perform data cleaning and exploratory data analysis (EDA) on a dataset of your choice, such as the Titanic dataset from Kaggle. Explore the relationships between variables and identify patterns and trends in the data.*
"""

import pandas as pd
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import seaborn as sns

"""**LOADING TITANIC DATASET**

"""

train_data=pd.read_csv('train.csv')

"""**DATAFRAME**"""

train_df=pd.DataFrame(train_data)

"""**SAMPLE OF TITANIC DATASET**"""

print(train_df.head(5))

"""**UNIQUE VALUE COUNT PAIRS**"""

train_df.value_counts() #Length: 183: There are 183 unique value-count pairs.

"""**DATA TYPES OF VARIABLES**"""

train_df.dtypes

"""**FILLED NULL VALUES USING MEDIAN**"""

train_df['Age'].fillna(train_df['Age'].median(),inplace=True)

"""**DESCRIPTIVE STATISTICS**"""

train_df.describe()

"""**EXPLORED THE RELATIONSHIP BETWEEN GENDER AND SURVIVAL RATE**"""

import numpy as np

x=train_df['Sex'].map({'male':0,'female':1})
y=train_df['Survived']


correlation_matrix=np.corrcoef(x,y)
print(correlation_matrix)

"""**VISUALIZED THE CORRELATION USING HEATMAP**"""

sns.heatmap(correlation_matrix,annot=True,cmap='Accent',linewidths=0.5)
plt.title('CORRELATION MATRIX')
plt.xlabel('Gender')
plt.ylabel('Survived')
plt.show()

"""**DISTRIBUTION OF AGE BY SEX**"""

plt.figure(figsize=[7,5])
sns.barplot(x=train_df['Sex'],y=train_df['Age'],hue=train_df['Sex'],palette='Spectral')
plt.title('DISTRIBUTION OF AGE BY SEX')
plt.show()

"""**AGE DISTRIBUTION BY TICKET CLASS AND GENDER**"""

sns.barplot(x=train_df['Pclass'],y=train_df['Age'],palette='PuOr',hue=train_df['Sex'],alpha=1)
plt.title('AGE DISTRIBUTION BY TICKET CLASS AND GENDER')
plt.show()

"""**CLASS BASED FARE STRUCTURE**"""

sns.barplot(x=train_df['Pclass'].map({1:'First',2:'Second',3:'Third'}),y=train_df['Fare'],data=train_df,hue=train_df['Pclass'],order=['Third','Second','First'],palette='Set3_r',legend=False)
plt.title('CLASS BASED FARE STRUCTURE')
plt.show()

"""**TICKET CLASS DISTRIBUTION BY SURVIVAL RATE**"""

sns.barplot(x=train_df['Survived'].map({1:'Survived',0:'Died'}),y=train_df['Pclass'],hue=train_df['Pclass'],palette='Reds',edgecolor='black',alpha=1)
plt.title('TICKET CLASS DISTRIBUTION BY SURVIVAL RATE')
plt.show()

"""**SURVIVAL COUNT BY SEX**

*This count plot represents absolute counts of survivors and non-survivors within each gender*
"""

train_df['Survival_rate']=train_df['Survived'].map({0:'Died',1:'Survived'})

sns.countplot(x='Sex',hue='Survival_rate',data=train_df,palette='CMRmap')
plt.title('Survival Count by Sex')
plt.show()

"""**SURVIVAL RATE OF MALE AND FEMALE**

*This barplot represents the proportion of survival within each gender*
"""

# Calculate the survival rate by gender
survival_rate = train_df.groupby('Sex')['Survived'].mean()
survival_count = train_df['Survived'].value_counts()

# Plotting the survival rate by gender
plt.figure(figsize=[7, 5])
bars = plt.bar(survival_rate.index, survival_rate.values, color=['pink', 'lightblue'],edgecolor='black')

# Adding labels and title
plt.xlabel('Gender')
plt.ylabel('Survival Rate')
plt.title('Survival Rate of Male and Female')

# Adding a legend
colors = {'Female': 'pink', 'Male': 'lightblue'}
labels = list(colors.keys())
handles = [plt.Rectangle((0,0),1,1, color=colors[label]) for label in labels]
plt.legend(handles, labels, loc='upper right')

# Annotating the survival rate on the bars
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, height, f'{height:.2f}', ha='center', va='bottom', color='black')

plt.show()



